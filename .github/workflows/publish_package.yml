name: publish-package
on: [workflow_dispatch]

jobs:
  before-build:
    strategy:
      fail-fast: false
      matrix:
        targets:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build --target=aarch64-apple-darwin
              strip -x *.node

    name: stable - ${{ matrix.targets.target }} - node@14
    runs-on: ${{ matrix.targets.host }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile

      - name: Cache cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache NPM dependencies
        uses: actions/cache@v2
        with:
          path: node_modules
          key: npm-cache-${{ matrix.settings.target }}-node@14-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: |
          yarn install --ignore-scripts --registry https://registry.npmjs.org --network-timeout 300000
      
      - name: Build package per target
        shell: bash
        run: ${{ matrix.targets.build }}

      - name: List binaries
        run: ls -R .
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: bindings-${{ matrix.targets.target }}
          path: bengbenge.*.node
          if-no-files-found: error